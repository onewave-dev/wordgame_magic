diff --git a/app.py b/app.py
index 8aec79f2b1be411b9eccfa8521e1c07137abc772..a4c37b96961cf716370416ab57b76c08ef5ed43f 100644
--- a/app.py
+++ b/app.py
@@ -59,76 +59,76 @@ async def choose_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Non
         await grebeshok_game.newgame(update, context)
     try:
         await query.edit_message_reply_markup(None)
     except Exception:
         pass
 
 
 @app.on_event("startup")
 async def on_startup() -> None:
     global APPLICATION
     APPLICATION = Application.builder().token(TOKEN).build()
     bot_username = (await APPLICATION.bot.get_me()).username
     compose_game.BOT_USERNAME = bot_username
     grebeshok_game.BOT_USERNAME = bot_username
     APPLICATION.add_handler(CommandHandler("start", start))
     APPLICATION.add_handler(CallbackQueryHandler(choose_game, pattern="^game_"))
     await APPLICATION.initialize()
     await APPLICATION.start()
     if PUBLIC_URL:
         webhook_url = f"{PUBLIC_URL.rstrip('/')}{WEBHOOK_PATH}"
         info = await APPLICATION.bot.get_webhook_info()
         if info.url != webhook_url:
             await APPLICATION.bot.set_webhook(
                 url=webhook_url,
                 secret_token=WEBHOOK_SECRET,
-                allowed_updates=[],
+                allowed_updates=["message", "callback_query", "chat_member"],
             )
 
 
 @app.on_event("shutdown")
 async def on_shutdown() -> None:
     await APPLICATION.stop()
     await APPLICATION.shutdown()
 
 
 @app.post(WEBHOOK_PATH)
 async def telegram_webhook(request: Request) -> JSONResponse:
     if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
         raise HTTPException(status_code=403, detail="Invalid secret")
     update = Update.de_json(await request.json(), APPLICATION.bot)
     await APPLICATION.process_update(update)
     return JSONResponse({"ok": True})
 
 
 @app.get("/set_webhook")
 async def set_webhook() -> JSONResponse:
     webhook_url = f"{PUBLIC_URL.rstrip('/')}{WEBHOOK_PATH}"
     await APPLICATION.bot.set_webhook(
         url=webhook_url,
         secret_token=WEBHOOK_SECRET,
-        allowed_updates=[],
+        allowed_updates=["message", "callback_query", "chat_member"],
     )
     return JSONResponse({"url": webhook_url})
 
 
 @app.get("/reset_webhook")
 async def reset_webhook() -> JSONResponse:
     webhook_url = f"{PUBLIC_URL.rstrip('/')}{WEBHOOK_PATH}"
     await APPLICATION.bot.delete_webhook(drop_pending_updates=False)
     await APPLICATION.bot.set_webhook(
         url=webhook_url,
         secret_token=WEBHOOK_SECRET,
-        allowed_updates=[],
+        allowed_updates=["message", "callback_query", "chat_member"],
     )
     return JSONResponse({"reset_to": webhook_url})
 
 
 @app.get("/")
 async def root() -> JSONResponse:
     return JSONResponse({"message": "Wordgame Magic service. See /healthz for status."})
 
 
 @app.get("/healthz")
 async def healthz() -> JSONResponse:
     return JSONResponse({"status": "ok"})
 
