diff --git a/app.py b/app.py
index a4c37b96961cf716370416ab57b76c08ef5ed43f..ae1b0b46f62e5418fad77cbbcdfea84a2a53fe77 100644
--- a/app.py
+++ b/app.py
@@ -9,50 +9,64 @@ from telegram.ext import (
     Application,
     CallbackQueryHandler,
     CommandHandler,
     ContextTypes,
 )
 
 import compose_word_game.word_game_app as compose_game
 import grebeshok_game.grebeshok_app as grebeshok_game
 
 
 TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
 PUBLIC_URL = os.environ.get("PUBLIC_URL")
 WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "")
 WEBHOOK_PATH = os.environ.get("WEBHOOK_PATH", "/webhook")
 
 logging.basicConfig(level=os.getenv("LOG_LEVEL", "INFO").upper())
 logger = logging.getLogger(__name__)
 
 app = FastAPI()
 
 APPLICATION: Optional[Application] = None
 REGISTERED_GAMES: Set[str] = set()
 
 
 async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
+    if context.args:
+        join_code = context.args[0]
+        if join_code in compose_game.JOIN_CODES:
+            if "compose" not in REGISTERED_GAMES:
+                compose_game.register_handlers(APPLICATION)
+                REGISTERED_GAMES.add("compose")
+            await compose_game.start_cmd(update, context)
+            return
+        if join_code.startswith("join_") or join_code in grebeshok_game.JOIN_CODES:
+            if "grebeshok" not in REGISTERED_GAMES:
+                grebeshok_game.register_handlers(APPLICATION)
+                REGISTERED_GAMES.add("grebeshok")
+            await grebeshok_game.start_cmd(update, context)
+            return
     keyboard = InlineKeyboardMarkup(
         [
             [
                 InlineKeyboardButton("Составь слово!", callback_data="game_compose"),
                 InlineKeyboardButton("Гребешок", callback_data="game_grebeshok"),
             ]
         ]
     )
     if update.message:
         await update.message.reply_text("Выберите игру:", reply_markup=keyboard)
 
 
 async def choose_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
     query = update.callback_query
     await query.answer()
     game = query.data
     if game == "game_compose":
         if "compose" not in REGISTERED_GAMES:
             compose_game.register_handlers(APPLICATION)
             REGISTERED_GAMES.add("compose")
         await compose_game.start_cmd(update, context)
     elif game == "game_grebeshok":
         if "grebeshok" not in REGISTERED_GAMES:
             grebeshok_game.register_handlers(APPLICATION)
             REGISTERED_GAMES.add("grebeshok")
