diff --git a/grebeshok_game/grebeshok_app.py b/grebeshok_game/grebeshok_app.py
index 25330d738474288a334789fdcf99490216aeca4e..ee4f4e595a9e293956c9dee97c1aa2dc35abc7ec 100644
--- a/grebeshok_game/grebeshok_app.py
+++ b/grebeshok_game/grebeshok_app.py
@@ -462,79 +462,90 @@ async def finish_game(game: GameState, context: CallbackContext, reason: str) ->
     await broadcast(game, text, context)
     ACTIVE_GAMES.pop(gid, None)
 
 
 async def dummy_bot_word(context: CallbackContext) -> None:
     gid = context.job.data
     game = ACTIVE_GAMES.get(gid)
     if not game or not game.base_letters:
         return
     words = list(viable_words(tuple(game.base_letters)))
     if not words:
         return
     word = random.choice(words)
     player = game.players[0]
     if word in game.used_words:
         return
     if any(word.count(b) < 1 for b in game.base_letters):
         return
     player.words.append(word)
     player.points += 1
     game.used_words.add(word)
     await broadcast(game, f"–ë–æ—Ç: {word}", context)
 
 
 async def handle_word(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
+    responses = {
+        "ok": "‚úÖ",
+        "not_found": "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞",
+        "missing_letters": "–°–ª–æ–≤–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –±—É–∫–≤—ã",
+        "used_by_you": "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ",
+        "used_by_other": "–°–ª–æ–≤–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º",
+    }
+
     text = update.message.text.lower().replace("—ë", "–µ")
     if not re.fullmatch(r"[–∞-—è]+", text):
         return
     chat = update.effective_chat
     gid = game_key(chat.id, update.message.message_thread_id)
     game = get_game(chat.id, update.message.message_thread_id)
     user_id = update.effective_user.id
     if not game:
         game = next((g for g in ACTIVE_GAMES.values() if user_id in g.players), None)
         gid = game_key_from_state(game) if game else None
     if not game or game.status != "running":
         return
     game.player_chats[user_id] = chat.id
     if text not in DICTIONARY:
-        await update.message.reply_text("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞")
+        await update.message.reply_text(responses["not_found"])
         return
     if any(text.count(b) < 1 for b in game.base_letters):
-        await update.message.reply_text("–°–ª–æ–≤–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –±—É–∫–≤—ã")
-        return
-    if text in game.used_words:
-        await update.message.reply_text("–°–ª–æ–≤–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
+        await update.message.reply_text(responses["missing_letters"])
         return
     player = game.players.get(user_id)
     if not player:
         return
+    if text in player.words:
+        await update.message.reply_text(responses["used_by_you"])
+        return
+    if text in game.used_words:
+        await update.message.reply_text(responses["used_by_other"])
+        return
     player.words.append(text)
     player.points += 1
     game.used_words.add(text)
-    await update.message.reply_text("‚úÖ")
+    await update.message.reply_text(responses["ok"])
     await broadcast(game, f"{player.name}: {text}", context)
     if sum(text.count(b) for b in game.base_letters) >= 6:
         await broadcast(game, f"üî• {player.name} –ø—Ä–∏—Å–ª–∞–ª –º–æ—â–Ω–æ–µ —Å–ª–æ–≤–æ!", context)
 
 
 # ---------------------------------------------------------------------------
 # Handler registration and FastAPI setup
 # ---------------------------------------------------------------------------
 
 
 APPLICATION: Optional[Application] = None
 BOT_USERNAME: str = ""
 
 
 def register_handlers(application: Application, include_start: bool = False) -> None:
     global APPLICATION
     APPLICATION = application
     if include_start:
         application.add_handler(CommandHandler("start", start_cmd))
     application.add_handler(CommandHandler("newgame", newgame))
     application.add_handler(CommandHandler("join", join_cmd))
     application.add_handler(CommandHandler(["quit", "exit"], quit_cmd))
     application.add_handler(
         MessageHandler(filters.TEXT & (~filters.COMMAND), handle_name),
         group=0,
