diff --git a/grebeshok_game/grebeshok_app.py b/grebeshok_game/grebeshok_app.py
index 54eb985313e68104d944d97b87e292bac1ba87c1..25330d738474288a334789fdcf99490216aeca4e 100644
--- a/grebeshok_game/grebeshok_app.py
+++ b/grebeshok_game/grebeshok_app.py
@@ -412,54 +412,75 @@ async def start_round(game: GameState, context: CallbackContext) -> None:
     await broadcast(game, "Игра началась!", context)
 
 
 async def one_minute_warning(context: CallbackContext) -> None:
     gid = context.job.data
     game = ACTIVE_GAMES.get(gid)
     if game:
         await broadcast(game, "Осталась 1 минута!", context)
 
 
 async def end_game_job(context: CallbackContext) -> None:
     gid = context.job.data
     game = ACTIVE_GAMES.get(gid)
     if game:
         await finish_game(game, context, "Время вышло")
 
 
 async def finish_game(game: GameState, context: CallbackContext, reason: str) -> None:
     gid = game_key_from_state(game)
     for job in game.jobs.values():
         try:
             job.schedule_removal()
         except Exception:
             pass
     game.status = "finished"
-    scores = sorted(
-        ((p.points, p.name) for p in game.players.values()), reverse=True
+    letters = " • ".join(ch.upper() for ch in game.base_letters)
+    players_sorted = sorted(
+        game.players.values(), key=lambda p: p.points, reverse=True
     )
-    text = reason + "\n" + "\n".join(f"{name}: {pts}" for pts, name in scores)
+    max_points = players_sorted[0].points if players_sorted else 0
+    winner_names = ", ".join(
+        p.name for p in players_sorted if p.points == max_points
+    )
+    lines = [
+        "**Игра окончена! Результаты**:",
+        "",
+        f"**Буквы:** {letters}",
+        "",
+    ]
+    for player in players_sorted:
+        lines.append(player.name)
+        lines.append("Слова:")
+        for word in player.words:
+            lines.append(f"  {word}")
+        lines.append(f"**Итог:** {player.points}")
+        lines.append("")
+    if lines and lines[-1] == "":
+        lines.pop()
+    lines.append(f"🏆 **Победитель:** {winner_names}")
+    text = "\n".join(lines)
     await broadcast(game, text, context)
     ACTIVE_GAMES.pop(gid, None)
 
 
 async def dummy_bot_word(context: CallbackContext) -> None:
     gid = context.job.data
     game = ACTIVE_GAMES.get(gid)
     if not game or not game.base_letters:
         return
     words = list(viable_words(tuple(game.base_letters)))
     if not words:
         return
     word = random.choice(words)
     player = game.players[0]
     if word in game.used_words:
         return
     if any(word.count(b) < 1 for b in game.base_letters):
         return
     player.words.append(word)
     player.points += 1
     game.used_words.add(word)
     await broadcast(game, f"Бот: {word}", context)
 
 
 async def handle_word(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
